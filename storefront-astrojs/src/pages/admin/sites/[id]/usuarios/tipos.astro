---
import AdminLayout from '../../../../../layouts/AdminLayout.astro';
import { getUserSiteRole } from '../../../../../utils/sitePermissions.js';
import ConditionalAccess from '../../../../../components/react/ConditionalAccess.jsx';

// Obter ID do site da URL
const { id: siteId } = Astro.params;

// Obter dados do usu√°rio da sess√£o
const userData = {
  name: 'Administrador',
  email: 'admin@example.com',
  roles: ['admin'],
  avatarUrl: '/admin/avatar.jpg'
};

// Obter dados do site
const API_URL = import.meta.env.PUBLIC_API_URL || 'http://localhost:3000';
let site = null;
let siteRoles = [];

try {
  // Buscar site
  const siteResponse = await fetch(`${API_URL}/api/sites/${siteId}`, {
    credentials: 'include'
  });
  
  if (siteResponse.ok) {
    site = await siteResponse.json();
    
    // Buscar os pap√©is deste site
    if (site.siteRoles) {
      // Se siteRoles for um array de IDs, buscar cada um
      const roleIds = Array.isArray(site.siteRoles) ? site.siteRoles : [];
      
      if (roleIds.length > 0) {
        const rolesPromises = roleIds.map(roleId => 
          fetch(`${API_URL}/api/site-user-roles/${roleId}`, {
            credentials: 'include'
          }).then(res => res.json())
        );
        
        siteRoles = await Promise.all(rolesPromises);
      }
    }
  }
} catch (error) {
  console.error('Erro ao carregar site:', error);
}

// Verificar permiss√µes
const userRole = await getUserSiteRole(siteId);
const hasPermission = userRole?.permissions?.some(p => 
  p.resource === 'users' && p.actions.includes('read')
) || userData.roles.includes('admin');

// Se n√£o tiver permiss√£o, redirecionar
if (!hasPermission) {
  return Astro.redirect('/admin/sites');
}

// Definir vari√°veis para UI
const pageTitle = `Tipos de Usu√°rio - ${site?.name || 'Site'}`;
---

<AdminLayout 
  title={pageTitle} 
  currentSection="site-users" 
  currentSiteId={siteId} 
  userData={userData}
>
  <div class="page-container">
    <div class="page-header">
      <div class="page-title">
        <h1>Tipos de Usu√°rio</h1>
        <div class="breadcrumbs">
          <a href="/admin">Admin</a> / 
          <a href="/admin/sites">Sites</a> / 
          <a href={`/admin/sites/${siteId}`}>{site?.name || 'Site'}</a> / 
          <a href={`/admin/sites/${siteId}/usuarios`}>Usu√°rios</a> / 
          <span>Tipos</span>
        </div>
      </div>
      
      <div class="page-actions">
        <ConditionalAccess siteId={siteId} resource="users" action="create" client:load>
          <a href={`/admin/sites/${siteId}/usuarios/tipos/criar`} class="btn-primary">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <line x1="12" y1="5" x2="12" y2="19"></line>
              <line x1="5" y1="12" x2="19" y2="12"></line>
            </svg>
            Novo Tipo de Usu√°rio
          </a>
        </ConditionalAccess>
      </div>
    </div>
    
    <div class="content-card">
      {siteRoles.length > 0 ? (
        <table class="data-table">
          <thead>
            <tr>
              <th>Nome</th>
              <th>Identificador</th>
              <th>Permiss√µes</th>
              <th>Usu√°rios</th>
              <th>A√ß√µes</th>
            </tr>
          </thead>
          <tbody>
            {siteRoles.map(role => (
              <tr>
                <td class="role-name">{role.name}</td>
                <td class="role-slug">{role.slug}</td>
                <td class="role-permissions">
                  {role.permissions?.length || 0} permiss√µes
                </td>
                <td class="role-users">
                  <span class="badge">0</span>
                </td>
                <td class="actions">
                  <a href={`/admin/sites/${siteId}/usuarios/tipos/${role.id}/editar`} class="btn-icon edit" title="Editar">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                      <path d="M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7"></path>
                      <path d="M18.5 2.5a2.12 2.12 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z"></path>
                    </svg>
                  </a>
                  <button class="btn-icon delete js-delete-btn" title="Excluir" data-id={role.id}>
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                      <polyline points="3 6 5 6 21 6"></polyline>
                      <path d="M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"></path>
                      <line x1="10" y1="11" x2="10" y2="17"></line>
                      <line x1="14" y1="11" x2="14" y2="17"></line>
                    </svg>
                  </button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      ) : (
        <div class="empty-state">
          <div class="icon">
            <svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1" stroke-linecap="round" stroke-linejoin="round">
              <path d="M17 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"></path>
              <circle cx="9" cy="7" r="4"></circle>
              <path d="M23 21v-2a4 4 0 0 0-3-3.87"></path>
              <path d="M16 3.13a4 4 0 0 1 0 7.75"></path>
            </svg>
          </div>
          <h3>Nenhum tipo de usu√°rio definido</h3>
          <p>Crie tipos de usu√°rio para gerenciar diferentes n√≠veis de acesso ao seu site.</p>
          <div class="empty-actions">
            <a href={`/admin/sites/${siteId}/usuarios/tipos/criar`} class="btn-primary">
              Criar primeiro tipo de usu√°rio
            </a>
          </div>
        </div>
      )}
    </div>
    
    <!-- Exemplos de Templates -->
    {siteRoles.length === 0 && (
      <div class="content-card template-examples">
        <h2>Templates de tipos de usu√°rio</h2>
        <p>Voc√™ pode criar rapidamente tipos comuns de usu√°rio usando estes templates:</p>
        
        <div class="templates-grid">
          <div class="template-card">
            <div class="template-icon">üë•</div>
            <h3>Cliente</h3>
            <p>Para sites de e-commerce, com acesso a pedidos e perfil pr√≥prio.</p>
            <button class="btn-secondary js-template-btn" data-template="cliente">
              Criar template
            </button>
          </div>
          
          <div class="template-card">
            <div class="template-icon">üìù</div>
            <h3>Autor</h3>
            <p>Para blogs e sites de conte√∫do, com permiss√µes para criar e editar posts.</p>
            <button class="btn-secondary js-template-btn" data-template="autor">
              Criar template
            </button>
          </div>
          
          <div class="template-card">
            <div class="template-icon">üõ†Ô∏è</div>
            <h3>Editor</h3>
            <p>Para gerenciar conte√∫do, com permiss√µes para editar p√°ginas e m√≠dia.</p>
            <button class="btn-secondary js-template-btn" data-template="editor">
              Criar template
            </button>
          </div>
          
          <div class="template-card">
            <div class="template-icon">üéì</div>
            <h3>Membro</h3>
            <p>Para sites com conte√∫do exclusivo, com acesso a √°reas restritas.</p>
            <button class="btn-secondary js-template-btn" data-template="membro">
              Criar template
            </button>
          </div>
        </div>
      </div>
    )}
  </div>
</AdminLayout>

<style>
  .empty-state {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: 3rem 1rem;
    text-align: center;
  }
  
  .empty-state .icon {
    color: var(--text-secondary);
    margin-bottom: 1rem;
  }
  
  .empty-state h3 {
    font-size: 1.25rem;
    font-weight: 600;
    margin-bottom: 0.5rem;
    color: var(--text-primary);
  }
  
  .empty-state p {
    color: var(--text-secondary);
    max-width: 32rem;
    margin-bottom: 1.5rem;
  }
  
  .template-examples {
    margin-top: 2rem;
  }
  
  .templates-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(240px, 1fr));
    gap: 1.5rem;
    margin-top: 1.5rem;
  }
  
  .template-card {
    background-color: var(--bg-card);
    border: 1px solid var(--border-light);
    border-radius: 0.5rem;
    padding: 1.5rem;
    display: flex;
    flex-direction: column;
    align-items: flex-start;
    transition: all 0.2s ease;
  }
  
  .template-card:hover {
    border-color: var(--border-hover);
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -2px rgba(0, 0, 0, 0.1);
  }
  
  .template-icon {
    font-size: 2rem;
    margin-bottom: 1rem;
  }
  
  .template-card h3 {
    font-size: 1.125rem;
    font-weight: 600;
    margin-bottom: 0.5rem;
    color: var(--text-primary);
  }
  
  .template-card p {
    color: var(--text-secondary);
    font-size: 0.875rem;
    margin-bottom: 1.5rem;
    flex-grow: 1;
  }
  
  .badge {
    display: inline-block;
    padding: 0.25rem 0.5rem;
    border-radius: 9999px;
    font-size: 0.75rem;
    font-weight: 500;
    background-color: var(--bg-badge);
    color: var(--text-badge);
  }
  
  .role-permissions {
    font-size: 0.875rem;
    color: var(--text-secondary);
  }
  
  .role-name {
    font-weight: 600;
    color: var(--text-primary);
  }
  
  .role-slug {
    font-family: monospace;
    font-size: 0.875rem;
    background-color: var(--bg-code);
    padding: 0.25rem 0.5rem;
    border-radius: 0.25rem;
    color: var(--text-code);
  }
  
  .actions {
    display: flex;
    gap: 0.5rem;
  }
  
  .btn-icon {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 2rem;
    height: 2rem;
    border-radius: 0.375rem;
    background-color: transparent;
    transition: all 0.2s ease;
    color: var(--text-secondary);
    border: 1px solid transparent;
    cursor: pointer;
  }
  
  .btn-icon:hover {
    background-color: var(--bg-hover);
  }
  
  .btn-icon.edit:hover {
    color: var(--blue-600);
    border-color: var(--blue-200);
  }
  
  .btn-icon.delete:hover {
    color: var(--red-600);
    border-color: var(--red-200);
  }
</style>

<script define:vars={{ siteId }}>
  document.addEventListener('DOMContentLoaded', () => {
    // Handler para bot√µes de exclus√£o
    const deleteButtons = document.querySelectorAll('.js-delete-btn');
    deleteButtons.forEach(button => {
      button.addEventListener('click', async () => {
        const roleId = button.dataset.id;
        
        if (!roleId) return;
        
        if (confirm('Tem certeza que deseja excluir este tipo de usu√°rio? Esta a√ß√£o n√£o pode ser desfeita.')) {
          try {
            const API_URL = import.meta.env.PUBLIC_API_URL || 'http://localhost:3000';
            
            // Deletar o tipo de usu√°rio via API
            const response = await fetch(`${API_URL}/api/site-user-roles/${roleId}`, {
              method: 'DELETE',
              credentials: 'include'
            });
            
            if (response.ok) {
              window.location.reload();
            } else {
              alert('Erro ao excluir tipo de usu√°rio. Tente novamente.');
            }
          } catch (error) {
            console.error('Erro:', error);
            alert('Ocorreu um erro ao excluir o tipo de usu√°rio.');
          }
        }
      });
    });
    
    // Handler para bot√µes de template
    const templateButtons = document.querySelectorAll('.js-template-btn');
    templateButtons.forEach(button => {
      button.addEventListener('click', async () => {
        const template = button.dataset.template;
        
        if (!template) return;
        
        try {
          button.disabled = true;
          button.textContent = 'Criando...';
          
          const API_URL = import.meta.env.PUBLIC_API_URL || 'http://localhost:3000';
          
          // Dados de cada template
          const templateData = {
            cliente: {
              name: 'Cliente',
              slug: 'cliente',
              site: siteId,
              description: 'Acesso para clientes do site, com visualiza√ß√£o de pedidos e perfil.',
              permissions: [
                { resource: 'pages', actions: ['read'] },
                { resource: 'products', actions: ['read'] },
                { resource: 'forms', actions: ['read', 'create'] }
              ]
            },
            autor: {
              name: 'Autor',
              slug: 'autor',
              site: siteId,
              description: 'Acesso para autores de conte√∫do, com permiss√µes para criar e editar posts.',
              permissions: [
                { resource: 'posts', actions: ['read', 'create', 'update'] },
                { resource: 'media', actions: ['read', 'create'] },
                { resource: 'pages', actions: ['read'] }
              ]
            },
            editor: {
              name: 'Editor',
              slug: 'editor',
              site: siteId,
              description: 'Acesso completo para gerenciar conte√∫do, p√°ginas e m√≠dia.',
              permissions: [
                { resource: 'pages', actions: ['read', 'create', 'update'] },
                { resource: 'posts', actions: ['read', 'create', 'update', 'delete'] },
                { resource: 'media', actions: ['read', 'create', 'update', 'delete'] },
                { resource: 'settings', actions: ['read'] }
              ]
            },
            membro: {
              name: 'Membro',
              slug: 'membro',
              site: siteId,
              description: 'Acesso para membros do site, com visualiza√ß√£o de conte√∫do exclusivo.',
              permissions: [
                { resource: 'pages', actions: ['read'] },
                { resource: 'posts', actions: ['read'] },
                { resource: 'forms', actions: ['read', 'create'] }
              ]
            }
          };
          
          // Criar o tipo de usu√°rio
          const response = await fetch(`${API_URL}/api/site-user-roles`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify(templateData[template]),
            credentials: 'include'
          });
          
          if (response.ok) {
            window.location.reload();
          } else {
            const errorData = await response.json();
            alert(`Erro ao criar template: ${errorData.message || 'Tente novamente.'}`);
            button.disabled = false;
            button.textContent = 'Criar template';
          }
        } catch (error) {
          console.error('Erro:', error);
          alert('Ocorreu um erro ao criar o template.');
          button.disabled = false;
          button.textContent = 'Criar template';
        }
      });
    });
  });
</script>