---
/**
 * Componente para blocos de conteúdo
 * 
 * Este componente exibe um bloco de conteúdo rico
 * com suporte a markdown e personalizações de layout.
 */

import { contentProcessors } from '../lib/renderEngine';

const {
  title = '',
  content = '',
  contentType = 'html', // html, markdown, richtext
  textAlign = 'left', // left, center, right, justify
  maxWidth = '800px',
  padding = '2rem',
  backgroundColor = '',
  textColor = '',
  addBorder = false,
  borderColor = 'var(--color-primary)',
  borderRadius = 'var(--border-radius-md)',
  id = ''
} = Astro.props;

// Processar conteúdo conforme o tipo
let processedContent = content;

// Para markdown, processar conteúdo
if (contentType === 'markdown') {
  processedContent = await contentProcessors.markdown(content);
}

// Definir classes e estilos
const containerStyle = {
  textAlign,
  maxWidth,
  padding,
  backgroundColor: backgroundColor || 'transparent',
  color: textColor || 'inherit',
  border: addBorder ? `1px solid ${borderColor}` : 'none',
  borderRadius: addBorder ? borderRadius : '0'
};

// Preparar estilos inline
const styleString = Object.entries(containerStyle)
  .filter(([_, value]) => value)
  .map(([key, value]) => `${key}:${value}`)
  .join(';');
---

<div class="content-block" style={styleString} id={id}>
  {title && <h2 class="content-title">{title}</h2>}
  
  <div class="content-body" set:html={processedContent}></div>
  
  <slot />
</div>

<style>
  .content-block {
    margin: var(--spacing-lg) auto;
  }
  
  .content-title {
    margin-bottom: var(--spacing-md);
  }
  
  .content-body {
    width: 100%;
  }
  
  /* Estilos para conteúdo interno */
  .content-body :global(h1),
  .content-body :global(h2),
  .content-body :global(h3),
  .content-body :global(h4),
  .content-body :global(h5),
  .content-body :global(h6) {
    margin-top: var(--spacing-lg);
    margin-bottom: var(--spacing-sm);
  }
  
  .content-body :global(p) {
    margin-bottom: var(--spacing-md);
    line-height: 1.6;
  }
  
  .content-body :global(ul),
  .content-body :global(ol) {
    margin-bottom: var(--spacing-md);
    padding-left: var(--spacing-lg);
  }
  
  .content-body :global(li) {
    margin-bottom: var(--spacing-sm);
  }
  
  .content-body :global(blockquote) {
    margin: var(--spacing-md) 0;
    padding: var(--spacing-md) var(--spacing-lg);
    border-left: 4px solid var(--color-primary);
    background-color: var(--color-background-alt);
    font-style: italic;
  }
  
  .content-body :global(pre) {
    background-color: var(--color-background-alt);
    padding: var(--spacing-md);
    border-radius: var(--border-radius-sm);
    overflow-x: auto;
    margin-bottom: var(--spacing-md);
  }
  
  .content-body :global(code) {
    font-family: monospace;
    background-color: var(--color-background-alt);
    padding: 0.2em 0.4em;
    border-radius: var(--border-radius-sm);
  }
  
  .content-body :global(a) {
    color: var(--color-primary);
    text-decoration: none;
  }
  
  .content-body :global(a:hover) {
    text-decoration: underline;
  }
  
  .content-body :global(img) {
    max-width: 100%;
    height: auto;
    border-radius: var(--border-radius-sm);
    margin: var(--spacing-md) 0;
  }
  
  .content-body :global(table) {
    width: 100%;
    border-collapse: collapse;
    margin: var(--spacing-md) 0;
  }
  
  .content-body :global(th),
  .content-body :global(td) {
    padding: var(--spacing-sm);
    border: 1px solid #ddd;
    text-align: left;
  }
  
  .content-body :global(th) {
    background-color: var(--color-background-alt);
    font-weight: bold;
  }
</style>